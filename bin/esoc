#!/usr/bin/env ruby
# vim: filetype=ruby fileencoding=utf-8

require 'esoteric/brainfuck'
require 'esoteric/dt'
require 'esoteric/tetete'
require 'esoteric/whitespace'
require 'optparse'

options = {
  :outfile => 'eso.out',
}
OptionParser.new { |opt|
  opt.on('-o FILENAME') { |v| options[:outfile] = v }
  opt.on('-l LANGNAME', '--language=LANGNAME') { |v| options[:language] = v }
  opt.on('-c') { options[:compile_only] = true }
  opt.on('--verbose') { options[:verbose] = true }
  opt.on('-v', '--version') {
    puts "esoteric #{Esoteric::VERSION}"
    exit 0
  }

  opt.parse!(ARGV)
}
require 'pp' if options[:verbose]
require 'yaml' if options[:verbose]

options[:language] = case options[:language]
                     when /\A(brainf[u*]ck|bf)\z/  then :bf
                     when 'dt'                     then :dt
                     when 'てってってー','tetete'  then :ttt
                     when 'whitespace','ws'        then :ws
                     end

case options[:language]
when :bf  then include Esoteric::Brainfuck
when :dt  then include Esoteric::DT
when :ttt then include Esoteric::Tetete
when :ws  then include Esoteric::Whitespace
else raise RuntimeError, 'そんな言語ないよ'
end

object_files = []
ARGV.each do |filename|
  basename = File.basename(filename, ".#{options[:language]}")
  source   = open(filename) {|f| f.read }
  parsed   = Parser.parse(source)
  pp parsed if options[:verbose]
  puts parsed.to_yaml if options[:verbose]
  formed   = PreProcessor.process(parsed)
  pp formed if options[:verbose]
  compiler = Esoteric::Compiler.new
  compiler.init_llvm_module_with_name options[:language].to_s
  m = compiler.process(formed)
  p m if options[:verbose]
  m.write_bitcode "#{basename}.o"
  object_files << "#{basename}.o"
end

unless options[:compile_only]
  runtime = Dir.glob("{#{$:.join(',')}}/#{options[:language]}_runtime.bc")
  system "llvm-ld #{runtime.first} #{object_files.join(' ')} -o #{options[:outfile]}"
end
