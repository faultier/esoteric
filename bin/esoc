#!/usr/bin/env ruby
# vim: filetype=ruby fileencoding=utf-8

require 'esoteric/brainfuck'
require 'esoteric/dt'
require 'esoteric/tetete'
require 'esoteric/whitespace'
require 'optparse'

LANGUAGES = [:brainfuck, :dt, :tetete, :whitespace]
LANGUAGE_ALIASES = { :bf => :brainfuck, :ttt => :tetete, :ws => :whitespace }

options = {
  :outfile   => 'eso.out',
  :libraries => [],
}
OptionParser.new { |opt|
  opt.on('-o FILENAME') { |v| options[:outfile] = v }
  opt.on('-x LANGUAGE', LANGUAGES, LANGUAGE_ALIASES) { |v| options[:language] = v }
  opt.on('-l LIBRARY') { |v| options[:libraries] << v }
  opt.on('-c') { options[:compile_only] = true }
  opt.on('--verbose') { options[:verbose] = true }
  opt.on('-v', '--version') {
    puts "esoteric #{Esoteric::VERSION}"
    exit 0
  }

  opt.parse!(ARGV)
}
require 'pp' if options[:verbose]
require 'yaml' if options[:verbose]

options[:language] = case ARGV.first
                     when /\.bf\z/  then :brainfuck
                     when /\.dt\z/  then :dt
                     when /\.ttt\z/ then :tetete
                     when /\.ws\z/  then :whitespace
                     end
case options[:language]
when :brainfuck  then include Esoteric::Brainfuck
when :dt         then include Esoteric::DT
when :tetete     then include Esoteric::Tetete
when :whitespace then include Esoteric::Whitespace
else raise RuntimeError, 'そんな言語ないよ'
end

object_files = [Dir.glob("{#{$:.join(',')}}/#{options[:language]}_runtime.bc").first]
ARGV.each do |filename|
  basename = File.basename(filename, ".#{options[:language]}")
  print "compile #{filename} => #{basename}.o" if options[:verbose]
  source   = PreProcessor.process( open(filename) {|f| f.read } )
  ast      = Sexp.from_array(Parser.parse(source))
  compiler = Esoteric::Compiler.new
  compiler.init_llvm_module_with_name options[:language].to_s
  m = compiler.process(ast)
  m.write_bitcode "#{basename}.o"
  object_files << "#{basename}.o"
  puts "\tdone!" if options[:verbose]
end

unless options[:compile_only]
  command = %w(llvm-ld -native -strip-all)
  command += options[:libraries].map{ |libname| ['-l', libname] }
  command += object_files
  command += ['-o', options[:outfile]]
  puts command.join(' ') if options[:verbose]
  system command.join(' ')
# system "rm #{options[:outfile]}.bc #{object_files.join(' ')}"
end
