#!/usr/bin/env ruby
# vim: filetype=ruby fileencoding=utf-8

require 'esoteric/brainfuck'
require 'esoteric/dt'
require 'esoteric/tetete'
require 'esoteric/whitespace'
require 'optparse'

LANGUAGES = [:brainfuck, :dt, :tetete, :whitespace]
LANGUAGE_ALIASES = { :bf => :brainfuck, :ttt => :tetete, :ws => :whitespace }

options = {
  :libraries => [],
}
OptionParser.new { |opt|
  opt.on('-x LANGUAGE', LANGUAGES, LANGUAGE_ALIASES) { |v| options[:language] = v }
  opt.on('-l LIBRARY') { |v| options[:libraries] << v }
  opt.on('-v', '--version') {
    puts "esoteric #{Esoteric::VERSION}"
    exit 0
  }

  opt.parse!(ARGV)
}

binfile  = ARGV.first
ext      = File.extname(binfile)
basename = File.basename(binfile, ext)
bitcode  = "#{binfile}.bc"

options[:language] = case ext
                     when '.bf'  then :brainfuck
                     when '.dt'  then :dt
                     when '.ttt' then :tetete
                     when '.ws'  then :whitespace
                     end
case options[:language]
when :brainfuck  then include Esoteric::Brainfuck
when :dt         then include Esoteric::DT
when :tetete     then include Esoteric::Tetete
when :whitespace then include Esoteric::Whitespace
else raise RuntimeError, 'そんな言語ないよ'
end

unless FileTest.exist?(bitcode) && File::Stat.new(bitcode).mtime > File::Stat.new(binfile).mtime
  source   = PreProcessor.process(ARGF.read)
  ast      = Sexp.from_array(Parser.parse(source))
  compiler = Esoteric::Compiler.new
  compiler.init_llvm_module_with_name options[:language].to_s
  m = compiler.process(ast)
  m.write_bitcode bitcode
end

command = %w(llvm-ld -strip-all)
command += options[:libraries].map{ |libname| ['-l', libname] }
command += [Dir.glob("{#{$:.join(',')}}/#{options[:language]}_runtime.bc").first, bitcode]
command += ['-o', "/tmp/#{basename}"]
system command.join(' ')
system "lli /tmp/#{basename}.bc"
system "rm /tmp/#{basename}{,.bc}"
